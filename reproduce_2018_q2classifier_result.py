import pandas as pdimport numpy as npimport sklearnfrom sklearn.metrics import f1_scoreimport osos.chdir("/Users/ifanwu/Documents/CS_MS_TAMU/microbiota_ML")#Next step for this func is to include levels ohter than genusdef get_label_list(labels,type_='g__'):        ##get genus as labels'    type_labels=[]    for label in labels:                label_list=label.split(';')                for label_ in label_list:            if label_.find(type_)!=-1:                type_labels.append(label_.lstrip()) #.lstrip() removes the space at the beginning                break               if label_.find(type_)==-1: #if the last label_ is still not what I want            #print("this is not found:",type_)            #print("Appending None for",type_)            type_labels.append('None')                return type_labels"""def get_accu_f1(list1,list2):    accu=np.mean(np.array(list1)==np.array(list2))    f1=f1_score(list1,list2,average='weighted')    print("Accuracy= ",accu)     print("F1= ",f1)"""def get_accu_f1(answer_list,prediction_list):    #for multiclass not sure the following confusion matrix is correct (Shouldn't we treat each species/genus..etc as a separate class?)    #====================    set1=set(answer_list)    set2=set(prediction_list)        TP=len(set1 & set2)    TN= 0    FP=len(set2.difference(set1))    FN=len(set1.difference(set2))    #====================        accu=(TP+TN)/(TP+TN+FP+FN)    f1=TP/(TP+0.5*(FP+FN))        print("Accuracy= ",accu)     print("F1= ",f1)            #load classification results and answers##classification results (mock2)taxonomy_table=pd.read_csv('/Users/ifanwu/Documents/CS_MS_TAMU/microbiota_ML/mockrobiota/data/mock-2/taxonomy.tsv',sep='\t')classification=taxonomy_table['Taxon'].tolist()##answerstaxonomy_table=pd.read_csv('/Users/ifanwu/Documents/CS_MS_TAMU/microbiota_ML/mockrobiota/data/mock-2/source/taxonomy.tsv',sep='\t')answers=taxonomy_table['Taxonomy'].tolist()new_answers=[]for label in answers:    label=label.split(';')    append=['p__','c__','o__','f__','g__','s__','gs__']    for i in range(len(label)):        label[i]=append[i]+label[i]    new_answers.append(';'.join(label))        levels=['c__','o__','f__','g__','s__'] #levels reported in the q2-classifier paperfor level in levels:    classification_=get_label_list(classification,type_=level)    classification_=set(classification_)    classification_=classification_.difference({level,'None'}) #remove unwanted stuff        answers=get_label_list(new_answers,type_=level)        print("accu, F1 at ",level," is: ")    print("--------------------------")    get_accu_f1(answers,classification_)    print("--------------------------")    print("                          ")            