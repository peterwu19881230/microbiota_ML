import pandas as pdimport numpy as npimport sklearnfrom sklearn.metrics import f1_scoreimport utilityimport osos.chdir("/Users/ifanwu/Documents/CS_MS_TAMU/microbiota_ML/tax-credit-data/data/mock-community")"""def get_accu_f1(list1,list2):    accu=np.mean(np.array(list1)==np.array(list2))    f1=f1_score(list1,list2,average='weighted')    print("Accuracy= ",accu)     print("F1= ",f1)"""            #load classification results and answers##classification results (mock2)no_dataset=set([11,13,14,15,17,25]) #datasets skipped in tax-creditno_expected_tsv=set([1,2,6,7,8]) # no expected-sequence-taxonomies.tsv -> read matched-sequence-taxonomies.tsv insteadITS=set([9,10,24,26])ls=[]for i in range(1,26+1):    if i not in (no_dataset.union(ITS)):                ls.append('mock-'+str(i))#run gg99otu and silva classifier and extract taxonomy.tsv from greenOTU99_taxonomy.qza"""import subprocessfrom tqdm import tqdm#for ggprint("start")for mock in tqdm(ls):    #classify    subprocess.call('bash ggOTU99_classification.sh -p ' + mock,shell=True)        #extract taxonomy.tsv    in_file= mock + '/greenOTU99_taxonomy.qza'    out_dir= mock+'/taxonomy'    subprocess.call('unzip -o'+ ' -d ' + out_dir +' -j ' + in_file,shell=True)    print("end")#for silvaprint("start")for mock in tqdm(ls):    #classify    subprocess.call('bash silva138OTU99_classification.sh -p ' + mock,shell=True)        #extract taxonomy.tsv    in_file= mock + '/silva138OTU99_taxonomy.qza'    out_dir= mock+'/taxonomy_silva'    subprocess.call('unzip -o'+ ' -d ' + out_dir +' -j ' + in_file,shell=True)    print("end")"""#print the result and plot itimport matplotlib.pyplot as pltfig, (ax1, ax2) = plt.subplots(1, 2)fig.suptitle('+'.join(ls))fig.tight_layout()plt.ylim(bottom=0, top=1.1)for mock in ls:    print('Scores for ' + mock + ' is:')    print("===============================")        taxonomy_table=pd.read_csv(mock +'/taxonomy/taxonomy.tsv',sep='\t')    #taxonomy_table=pd.read_csv(mock +'/taxonomy_silva/taxonomy.tsv',sep='\t')    classification=taxonomy_table['Taxon'].tolist()        ##answers    if mock in no_expected_tsv:    	file = '/expected-sequence-taxonomies.tsv'    else:        file = '/matched-sequence-taxonomies.tsv'    taxonomy_table=pd.read_csv(mock + file,sep='\t')    answers=taxonomy_table['Standard Taxonomy'].tolist()                        levels=['c__','o__','f__','g__','s__'] #levels reported in the q2-classifier paper        accus=[]    f1s=[]    for level in levels:        classification_=get_label_list(classification,type_=level)        classification_=set(classification_)        classification_=classification_.difference({level,'None'}) #remove unwanted stuff                answers_=get_label_list(answers,type_=level)                """        print("accu, F1 at ",level," is: ")        print("--------------------------")        get_accu_f1(answers_,classification_)        print("--------------------------")        print("                          ")        """                accu,f1=get_accu_f1(answers_,classification_)        accus.append(accu)        f1s.append(f1)                    x=['Class','Order','Family','Genus','Species']    y1=accus    y2=f1s        ax1.plot(x, y1,'o-',alpha=0.4)    plt.setp(ax1, ylabel='Accuracy')        ax2.plot(x, y2,'o-',alpha=0.4)    ax2.legend((ls),prop={'size': 8},framealpha=1,bbox_to_anchor=(1.5, 1), loc='upper right', ncol=1)    plt.setp(ax2, ylabel='F1')                print("===============================")    print("                               ")            